# -*- coding: utf-8 -*-
"""Topsis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O76nQtQ_Zl1hMOJUqGpVojKhDrE9Jx0S
"""

import numpy as np
import pandas as pd

def normalize(matrix):
    norm = np.sqrt((matrix ** 2).sum(axis=0))
    return matrix / norm

def calculate_topsis(matrix, weights, impacts):
    # Step 1: Normalize the decision matrix
    norm_matrix = normalize(matrix)

    # Step 2: Multiply by weights
    weighted_matrix = norm_matrix * weights

    # Step 3: Determine ideal best and worst
    ideal_best = np.where(impacts == '+', weighted_matrix.max(axis=0), weighted_matrix.min(axis=0))
    ideal_worst = np.where(impacts == '+', weighted_matrix.min(axis=0), weighted_matrix.max(axis=0))

    # Step 4: Calculate Euclidean distances
    distance_best = np.sqrt(((weighted_matrix - ideal_best) ** 2).sum(axis=1))
    distance_worst = np.sqrt(((weighted_matrix - ideal_worst) ** 2).sum(axis=1))

    # Step 5: Calculate TOPSIS score
    topsis_score = distance_worst / (distance_best + distance_worst)

    # Step 6: Rank the alternatives
    ranks = topsis_score.argsort()[::-1] + 1  # Highest score gets rank 1

    return topsis_score, ranks

# Sample Data (Replace with actual dataset)
data = {
    "Alternative": ["A1", "A2", "A3", "A4", "A5"],
    "Criterion1": [250, 200, 300, 275, 225],
    "Criterion2": [3.5, 3.0, 4.5, 4.0, 3.8],
    "Criterion3": [500, 450, 600, 550, 480],
    "Criterion4": [200, 220, 180, 210, 190]
}
weights = np.array([0.3, 0.2, 0.4, 0.1])  # Example weights
impacts = np.array(['+', '+', '+', '-'])  # Example impacts (Benefit or Cost criteria)

df = pd.DataFrame(data)

# Extract numerical data
matrix = df.iloc[:, 1:].values  # Exclude Alternative column

# Apply TOPSIS
scores, rankings = calculate_topsis(matrix, weights, impacts)
df["TOPSIS Score"] = scores
df["Rank"] = rankings

# Display results
print(df.sort_values(by="Rank"))